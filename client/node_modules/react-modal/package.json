{
  "_args": [
    [
      {
        "raw": "react-modal",
        "scope": null,
        "escapedName": "react-modal",
        "name": "react-modal",
        "rawSpec": "",
        "spec": "latest",
        "type": "tag"
      },
      "/Users/justencracraft/source/work-tracker/client"
    ]
  ],
  "_from": "react-modal@latest",
  "_id": "react-modal@3.1.10",
  "_inCache": true,
  "_location": "/react-modal",
  "_nodeVersion": "8.1.2",
  "_npmOperationalInternal": {
    "host": "s3://npm-registry-packages",
    "tmp": "tmp/react-modal-3.1.10.tgz_1513716158569_0.4054435060825199"
  },
  "_npmUser": {
    "name": "diasbruno",
    "email": "dias.h.bruno@gmail.com"
  },
  "_npmVersion": "5.4.2",
  "_phantomChildren": {},
  "_requested": {
    "raw": "react-modal",
    "scope": null,
    "escapedName": "react-modal",
    "name": "react-modal",
    "rawSpec": "",
    "spec": "latest",
    "type": "tag"
  },
  "_requiredBy": [
    "#USER",
    "/"
  ],
  "_resolved": "https://registry.npmjs.org/react-modal/-/react-modal-3.1.10.tgz",
  "_shasum": "8898b5cc4ebba78adbb8dea4c55a69818aa682cc",
  "_shrinkwrap": null,
  "_spec": "react-modal",
  "_where": "/Users/justencracraft/source/work-tracker/client",
  "authors": [
    "Ryan Florence"
  ],
  "bugs": {
    "url": "https://github.com/reactjs/react-modal/issues"
  },
  "dependencies": {
    "exenv": "^1.2.0",
    "prop-types": "^15.5.10",
    "warning": "^3.0.0"
  },
  "description": "Accessible modal dialog component for React.JS",
  "devDependencies": {
    "babel-cli": "^6.26.0",
    "babel-core": "^6.25.0",
    "babel-eslint": "^8.0.1",
    "babel-loader": "^7.1.2",
    "babel-plugin-add-module-exports": "^0.2.1",
    "babel-preset-env": "^1.6.0",
    "babel-preset-react": "^6.24.1",
    "babel-preset-stage-2": "^6.24.1",
    "coveralls": "^2.13.1",
    "cross-env": "^5.0.1",
    "eslint": "^4.8.0",
    "eslint-config-prettier": "^2.6.0",
    "eslint-plugin-jsx-a11y": "^6.0.2",
    "eslint-plugin-prettier": "^2.3.1",
    "eslint-plugin-react": "^7.4.0",
    "gitbook-cli": "^2.3.0",
    "istanbul-instrumenter-loader": "^3.0.0",
    "karma": "^1.3.0",
    "karma-chrome-launcher": "2.2.0",
    "karma-coverage": "^1.1.1",
    "karma-firefox-launcher": "1.0.1",
    "karma-mocha": "^1.3.0",
    "karma-mocha-reporter": "^2.2.1",
    "karma-sourcemap-loader": "^0.3.7",
    "karma-webpack": "^2.0.4",
    "mocha": "3.5.3",
    "npm-run-all": "^4.1.1",
    "prettier": "^1.7.4",
    "react": "^16.0.0",
    "react-dom": "^16.0.0",
    "react-router": "^4.2.0",
    "react-router-dom": "^4.2.2",
    "should": "^13.1.0",
    "sinon": "next",
    "uglify-js": "3.1.1",
    "webpack": "^3.6.0",
    "webpack-dev-server": "2.8.2"
  },
  "directories": {
    "example": "examples"
  },
  "dist": {
    "integrity": "sha512-7b77AGWCkdg0YOf/qcYIGCpuwbxRwOA8P3UrUovk4grUNv+idOmHovJAx/Dcd3fuwHtgixxVjpcjVG60985MSA==",
    "shasum": "8898b5cc4ebba78adbb8dea4c55a69818aa682cc",
    "tarball": "https://registry.npmjs.org/react-modal/-/react-modal-3.1.10.tgz"
  },
  "gitHead": "79688e85bb851b15343b2f2376ad01076a4e08d9",
  "homepage": "https://github.com/reactjs/react-modal",
  "keywords": [
    "react",
    "react-component",
    "modal",
    "dialog"
  ],
  "license": "MIT",
  "main": "./lib/index.js",
  "maintainers": [
    {
      "name": "diasbruno",
      "email": "dias.h.bruno@gmail.com"
    }
  ],
  "name": "react-modal",
  "optionalDependencies": {},
  "peerDependencies": {
    "react": "^0.14.0 || ^15.0.0 || ^16",
    "react-dom": "^0.14.0 || ^15.0.0 || ^16"
  },
  "readme": "# react-modal\n\nAccessible modal dialog component for React.JS\n\n[![Build Status](https://travis-ci.org/reactjs/react-modal.svg?branch=v1)](https://travis-ci.org/reactjs/react-modal)\n[![Coverage Status](https://coveralls.io/repos/github/reactjs/react-modal/badge.svg?branch=master)](https://coveralls.io/github/reactjs/react-modal?branch=master)\n![gzip size](http://img.badgesize.io/https://unpkg.com/react-modal/dist/react-modal.min.js?compression=gzip)\n[![Join the chat at https://gitter.im/react-modal/Lobby](https://badges.gitter.im/Join%20Chat.svg)](https://gitter.im/react-modal/Lobby?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&utm_content=badge)\n\n## Table of Contents\n\n* [Installation](#installation)\n* [Usage](#usage)\n* [Styles](#styles)\n* [Examples](#examples)\n* [Testing](#testing)\n* [Demos](#demos)\n\n## Installation\n\nTo install, you can use [npm](https://npmjs.org/) or [yarn](https://yarnpkg.com):\n\n\n    $ npm install react-modal\n    $ yarn add react-modal\n\n\n## Usage\n\nThe Modal object has one required prop:\n\n- `isOpen` to render its children.\n\nExample:\n\n```jsx\n<Modal\n  isOpen={bool}\n  onAfterOpen={afterOpenFn}\n  onRequestClose={requestCloseFn}\n  closeTimeoutMS={n}\n  style={customStyle}\n  contentLabel=\"Modal\"\n>\n  <h1>Modal Content</h1>\n  <p>Etc.</p>\n</Modal>\n```\n\n> Use the prop `contentLabel` which adds `aria-label` to the modal if there is no label text visible on the screen, otherwise specify the element including the label text using `aria-labelledby`\n\n### App Element\n\nThe app element allows you to specify the portion\nof your app that should be hidden (via aria-hidden)\nto prevent assistive technologies such as screenreaders\nfrom reading content outside of the content of\nyour modal.\n\nIf you are doing server-side rendering, you should use\nthis property.\n\nIt can be specified in the following ways:\n\n- DOMElement\n\n```js\nModal.setAppElement(appElement);\n```\n\n- query selector - uses the first element found if you pass in a class.\n\n```js\nModal.setAppElement('#your-app-element');\n```\n\n### Additional Aria Attributes\n\nUse the property `aria` to pass any additional aria attributes. It accepts\nan object where the keys are the names of the attributes without the prefix\n`aria-`.\n\nExample:\n\n```jsx\n<Modal\n  isOpen={modalIsOpen}\n  aria={{\n    labelledby: \"heading\",\n    describedby: \"full_description\"\n  }}>\n  <h1 id=\"heading\">H1</h1>\n  <div id=\"full_description\">\n    <p>Description goes here.</p>\n  </div>\n</Modal>\n```\n\n## Styles\n\nStyles are passed as an object with 2 keys, 'overlay' and 'content' like so\n\n```js\n{\n  overlay : {\n    position          : 'fixed',\n    top               : 0,\n    left              : 0,\n    right             : 0,\n    bottom            : 0,\n    backgroundColor   : 'rgba(255, 255, 255, 0.75)'\n  },\n  content : {\n    position                   : 'absolute',\n    top                        : '40px',\n    left                       : '40px',\n    right                      : '40px',\n    bottom                     : '40px',\n    border                     : '1px solid #ccc',\n    background                 : '#fff',\n    overflow                   : 'auto',\n    WebkitOverflowScrolling    : 'touch',\n    borderRadius               : '4px',\n    outline                    : 'none',\n    padding                    : '20px'\n\n  }\n}\n```\n\nStyles passed to the modal are merged in with the above defaults and applied to their respective elements.\nAt this time, media queries will need to be handled by the consumer.\n\n### Using CSS Classes\n\nIf you prefer not to use inline styles or are unable to do so in your project,\nyou can pass `className` and `overlayClassName` props to the Modal.  If you do\nthis then none of the default styles will apply and you will have full control\nover styling via CSS.\n\nIf you want to override default content and overlay classes you can pass object\nwith three required properties: `base`, `afterOpen`, `beforeClose`.\n\n```jsx\n<Modal\n  ...\n  className={{\n    base: 'myClass',\n    afterOpen: 'myClass_after-open',\n    beforeClose: 'myClass_before-close'\n  }}\n  overlayClassName={{\n    base: 'myOverlayClass',\n    afterOpen: 'myOverlayClass_after-open',\n    beforeClose: 'myOverlayClass_before-close'\n  }}\n  ...\n>\n```\n\nYou can also pass a `portalClassName` to change the wrapper's class (*ReactModalPortal*).\nThis doesn't affect styling as no styles are applied to this element by default.\n\n### Overriding styles globally\n\nThe default styles above are available on `Modal.defaultStyles`. Changes to this\nobject will apply to all instances of the modal.\n\n### Appended to custom node\n\nYou can choose an element for the modal to be appended to, rather than using\nbody tag. To do this, provide a function to `parentSelector` prop that return\nthe element to be used.\n\n```jsx\n\nfunction getParent() {\n  return document.querySelector('#root');\n}\n\n<Modal\n  ...\n  parentSelector={getParent}\n  ...\n>\n  <p>Modal Content.</p>\n</Modal>\n```\n\n### Body class\n\nWhen the modal is opened a `ReactModal__Body--open` class is added to the `body` tag.\nYou can use this to remove scrolling on the body while the modal is open.\n\n```CSS\n/* Remove scroll on the body when react-modal is open */\n.ReactModal__Body--open {\n    overflow: hidden;\n}\n```\n\n## Examples\n\nInside an app:\n\n```jsx\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport Modal from 'react-modal';\n\nconst customStyles = {\n  content : {\n    top                   : '50%',\n    left                  : '50%',\n    right                 : 'auto',\n    bottom                : 'auto',\n    marginRight           : '-50%',\n    transform             : 'translate(-50%, -50%)'\n  }\n};\n\nclass App extends React.Component {\n  constructor() {\n    super();\n\n    this.state = {\n      modalIsOpen: false\n    };\n\n    this.openModal = this.openModal.bind(this);\n    this.afterOpenModal = this.afterOpenModal.bind(this);\n    this.closeModal = this.closeModal.bind(this);\n  }\n\n  openModal() {\n    this.setState({modalIsOpen: true});\n  }\n\n  afterOpenModal() {\n    // references are now sync'd and can be accessed.\n    this.subtitle.style.color = '#f00';\n  }\n\n  closeModal() {\n    this.setState({modalIsOpen: false});\n  }\n\n  render() {\n    return (\n      <div>\n        <button onClick={this.openModal}>Open Modal</button>\n        <Modal\n          isOpen={this.state.modalIsOpen}\n          onAfterOpen={this.afterOpenModal}\n          onRequestClose={this.closeModal}\n          style={customStyles}\n          contentLabel=\"Example Modal\"\n        >\n\n          <h2 ref={subtitle => this.subtitle = subtitle}>Hello</h2>\n          <button onClick={this.closeModal}>close</button>\n          <div>I am a modal</div>\n          <form>\n            <input />\n            <button>tab navigation</button>\n            <button>stays</button>\n            <button>inside</button>\n            <button>the modal</button>\n          </form>\n        </Modal>\n      </div>\n    );\n  }\n}\n\nReactDOM.render(<App />, appElement);\n```\n\n## Testing\n\nWhen using React Test Utils with this library, here are some things to keep in mind:\n\n- You need to set `isOpen={true}` on the modal component for it to render its children.\n- You need to use the `.portal` property, as in `ReactDOM.findDOMNode(renderedModal.portal)` or `TestUtils.scryRenderedDOMComponentsWithClass(Modal.portal, 'my-modal-class')` to acquire a handle to the inner contents of your modal.\n\nBy default the modal is closed when clicking outside of it (the overlay area). If you want to prevent this behavior you can\npass the 'shouldCloseOnOverlayClick' prop with 'false' value.\n\n```jsx\n<Modal\n  isOpen={bool}\n  onAfterOpen={afterOpenFn}\n  onRequestClose={requestCloseFn}\n  closeTimeoutMS={n}\n  shouldCloseOnOverlayClick={false}\n  style={customStyle}\n  contentLabel=\"No Overlay Click Modal\"\n>\n\n  <h1>Force Modal</h1>\n  <p>Modal cannot be closed when clicking the overlay area</p>\n  <button onClick={handleCloseFunc}>Close Modal...</button>\n</Modal>\n```\n\n## Demos\n\n* http://reactjs.github.io/react-modal/\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/reactjs/react-modal.git"
  },
  "scripts": {
    "lint": "eslint src/ specs/",
    "start": "webpack-dev-server --inline --host 127.0.0.1 --content-base examples/",
    "test": "cross-env NODE_ENV=test karma start"
  },
  "tags": [
    "react",
    "modal",
    "dialog"
  ],
  "version": "3.1.10"
}
